define(["./arrayRemoveDuplicates-3a9a9480","./Transforms-73e77b72","./Cartesian2-b4b7b0b3","./Check-5e798bbf","./ComponentDatatype-2da3a966","./CoplanarPolygonGeometryLibrary-6d76da75","./when-208fe5b0","./GeometryAttribute-b541caa6","./GeometryAttributes-b0b294d8","./GeometryInstance-411ead1b","./GeometryPipeline-86615bad","./IndexDatatype-3bc916b1","./PolygonGeometryLibrary-9fe00cbc","./Math-8386669c","./RuntimeError-7f634f5d","./WebGLConstants-5e2a49ab","./OrientedBoundingBox-2e9d8f93","./EllipsoidTangentPlane-69cc10ff","./AxisAlignedBoundingBox-122de82b","./IntersectionTests-40db2afa","./Plane-b91bfb59","./AttributeCompression-9711314b","./EncodedCartesian3-21af0f3b","./ArcType-dc1c5aee","./EllipsoidRhumbLine-73a4e3eb","./PolygonPipeline-b445e3f3"],(function(e,t,n,r,o,a,i,y,l,c,p,s,u,d,b,m,f,g,h,P,G,v,L,C,T,E){"use strict";function k(e){e=(e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT)).polygonHierarchy,this._polygonHierarchy=e,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=u.PolygonGeometryLibrary.computeHierarchyPackedLength(e)+1}k.fromPositions=function(e){return new k({polygonHierarchy:{positions:(e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT)).positions}})},k.pack=function(e,t,n){return n=i.defaultValue(n,0),t[n=u.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};var A={polygonHierarchy:{}};return k.unpack=function(e,t,n){t=i.defaultValue(t,0);var r=u.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);return t=r.startingIndex,delete r.startingIndex,t=e[t],(n=i.defined(n)?n:new k(A))._polygonHierarchy=r,n.packedLength=t,n},k.createGeometry=function(r){var i=r._polygonHierarchy;r=i.positions;if(!((r=e.arrayRemoveDuplicates(r,n.Cartesian3.equalsEpsilon,!0)).length<3)&&a.CoplanarPolygonGeometryLibrary.validOutline(r)){var d=u.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(i,!1);if(0!==d.length){for(var b=[],m=0;m<d.length;m++){var f=new c.GeometryInstance({geometry:function(e){for(var t=e.length,n=new Float64Array(3*t),r=s.IndexDatatype.createTypedArray(t,2*t),a=0,i=0,c=0;c<t;c++){var p=e[c];n[a++]=p.x,n[a++]=p.y,n[a++]=p.z,r[i++]=c,r[i++]=(c+1)%t}var u=new l.GeometryAttributes({position:new y.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:n})});return new y.Geometry({attributes:u,indices:r,primitiveType:y.PrimitiveType.LINES})}(d[m])});b.push(f)}return r=p.GeometryPipeline.combineInstances(b)[0],i=t.BoundingSphere.fromPoints(i.positions),new y.Geometry({attributes:r.attributes,indices:r.indices,primitiveType:r.primitiveType,boundingSphere:i})}}},function(e,t){return(e=i.defined(t)?k.unpack(e,t):e)._ellipsoid=n.Ellipsoid.clone(e._ellipsoid),k.createGeometry(e)}}));